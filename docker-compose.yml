services:
  proxy-gateway:
    build:
      context: ./proxy-gateway
    container_name: proxy-gateway
    networks:
      - microservices
    ports:
      - 3333:3333

  db-products:
    image: mysql:8.0-debian
    container_name: db-products
    environment:
      - MYSQL_DATABASE=db-products
      - MYSQL_ROOT_PASSWORD=root
    networks:
      - microservices

  api-products:
    build:
      context: ./products
    entrypoint: dockerize -wait tcp://db-products:3306 -timeout 20s ./docker-entrypoint.sh npm run start
    container_name: api-products
    networks:
      - microservices

  db-users:
    image: mysql:8.0-debian
    container_name: db-users
    environment:
      - MYSQL_DATABASE=db-users
      - MYSQL_ROOT_PASSWORD=root
    networks:
      - microservices

  api-users:
    build:
      context: ./users
    entrypoint: dockerize -wait tcp://db-users:3306 -timeout 20s ./docker-entrypoint.sh npm run start
    container_name: api-users
    networks:
      - microservices

  db-purchases:
    image: mysql:8.0-debian
    container_name: db-purchases
    environment:
      - MYSQL_DATABASE=db-purchases
      - MYSQL_ROOT_PASSWORD=root
    networks:
      - microservices

  api-purchases:
    build:
      context: ./purchases
    entrypoint: dockerize -wait tcp://db-purchases:3306 -timeout 20s ./docker-entrypoint.sh npm run start
    container_name: api-purchases
    networks:
      - microservices

networks:
  microservices:
    driver: bridge
